rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {

      // Required for collection group queries
      
      match /posts/{postId} {
      	allow read;
      }
      
      match /users/{userId} {
      	allow read;
        allow create: if isValidUser(userId);
      }
      
      match /usernames/{username} {
      	allow read;
        allow create: if isValidUsername(username);
      }
            
      match /users/{userId}/posts/{postId} {
      	allow read;
        allow create: if canCreatePost(userId); 
        allow update: if canUpdatePost(userId) || canIncrementHearts(userId, postId);
        allow delete: if request.auth.uid == userId;
      }
      
      match /users/{userId}/awards/{awardId} {
      	allow read;
        allow create: if canCreateAwards(userId); 
      }
      
      match /users/{userId}/surveyResults/{surveyId} {
      	allow read;
        allow create: if canCreateSurvey(userId); 
        allow update: if canUpdateSurvey(userId) || canIncrementVotes(userId, surveyId);
        allow delete: if request.auth.uid == userId;
      }
      
      match /users/{userId}/posts/{postId}/hearts/{heartId} {
      	allow read;
        allow write: if request.auth.uid == heartId;
      }

      // Users

      function isValidUser(userId) {
        let isOwner = request.auth.uid == userId;
      	let username = request.resource.data.username;
        let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));
        
        return isOwner && createdValidUsername;
      }
      
      function isValidUsername(username) {
		    let isOwner = request.auth.uid == request.resource.data.uid;
        let isValidLength = username.size() >= 3 && username.size() <= 15;
        let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
        
        return isOwner && isValidLength && isValidUserDoc;     
      }

      // Posts
      
      function canCreatePost(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.content.size() < 20000 && request.resource.data.heartCount == 0;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.username;

      	return isOwner && isNow && isValidContent && usernameMatches;
      }
      
      function canUpdatePost(userId) {
        let isOwner = request.auth.uid == userId;
      	let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.content.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'heartCount']);
        
        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }

      // Hearts
      
      function canIncrementHearts(userId, postId) {
		    let hasValidFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['heartCount']);
        let currentUser = request.auth.uid;
		    let heartDocExistsAfter = existsAfter(/databases/$(database)/documents/users/$(userId)/posts/$(postId)/hearts/$(currentUser));
        let heartDocExists = exists(/databases/$(database)/documents/users/$(userId)/posts/$(postId)/hearts/$(currentUser));
				
        let heartDocAdded= !heartDocExists && heartDocExistsAfter;
        let heartDocRemoved = heartDocExists && !heartDocExistsAfter;

        
        let countChange = request.resource.data.heartCount - resource.data.heartCount;
        let validChange = countChange == 1 || countChange == -1;

        return hasValidFields && validChange && ( countChange == 1 ? heartDocAdded : heartDocRemoved );
      }
      
      // Surveys
      
			function canCreateSurvey(userId) {
        let isOwner = request.auth.uid == userId;
        let isNow = request.time == request.resource.data.createdAt;
        let isValidContent = request.resource.data.slug.size() < 20000 && request.resource.data.upvotes == 0;
        let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
        let usernameMatches = username == request.resource.data.username;

      	return isOwner && isNow && isValidContent && usernameMatches;
      }
      
      function canUpdateSurvey(userId) {
        let isOwner = request.auth.uid == userId;
      	let isNow = request.time == request.resource.data.updatedAt;
        let isValidContent = request.resource.data.slug.size() < 20000;
        let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'username', 'upvotes']);
        
        return isOwner && isNow && isValidContent && doesNotUpdateForbidden;
      }

      // votes
      
      function canIncrementVotes(userId, surveyId) {
		    let hasValidFields = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes']);
        let currentUser = request.auth.uid;
		    let voteDocExistsAfter = existsAfter(/databases/$(database)/documents/users/$(userId)/surveyResults/$(surveyId)/votes/$(currentUser));
        let voteDocExists = exists(/databases/$(database)/documents/users/$(userId)/surveyResults/$(surveyId)/votes/$(currentUser));
				
        let voteDocAdded= !voteDocExists && voteDocExistsAfter;
        let voteDocRemoved = voteDocExists && !voteDocExistsAfter;
        
        let countChange = request.resource.data.upvotes - resource.data.upvotes;
        let validChange = countChange == 1 || countChange == -1;

        return hasValidFields && validChange && ( countChange == 1 ? voteDocAdded : voteDocRemoved );
      }
      
      // awards
      
      function canCreateAwards(userId) {
        let isOwner = request.auth.uid == userId;
      	let isNow = request.time == request.resource.data.joinedAt;
        return isOwner && isNow
      }
      
    }
    
  }
}